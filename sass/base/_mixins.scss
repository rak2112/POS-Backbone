//------ SASS Useful Mixins ------
// by Ryan Burgess
// https://github.com/ryanburgess/SASS-Useful-Mixins

// -----------------------------------------
// @include background-image(linear-gradient(white, #cccccc 30%, #bbbbbb 70%, #aaaaaa));
// gradientBg(#fff, #cccccc 30%, #666 70%, #eaeaea));
@mixin gradientBg($first, $sec, $fpercent, $third, $secPercent, $fourth){
  background-image: -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, $first), color-stop($fpercent, $sec), color-stop($secPercent, $third), color-stop(100%, $fourth));
  background-image: -webkit-linear-gradient($first, $sec $fpercent, $third $secPercent, $fourth);
  background-image: -moz-linear-gradient($first, $sec $fpercent, $third $secPercent, $fourth);
  background-image: -o-linear-gradient($first, $sec $fpercent, $third $secPercent, $fourth);
  background-image: linear-gradient($first, $sec $fpercent, $third $secPercent, $fourth);
}
  // Linear Gradients
  
 // -------------------------------------------

 // example: @include linearGradient(rgba(255, 255, 255, 0), 0%, rgba(255, 255, 255, 1), 80%);

@mixin linearGradient($top, $tpercent, $bottom, $bpercent){

  background: $top; /* Old browsers */
  background: -moz-linear-gradient(top,  $top $tpercent, $bottom $bpercent); /* FF3.6+ */
  background: -webkit-gradient(linear, left top, left bottom, color-stop($tpercent,$top), color-stop($bpercent,$bottom)); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top,  $top $tpercent,$bottom $bpercent); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(top,  $top $tpercent,$bottom $bpercent); /* Opera 11.10+ */
  background: -ms-linear-gradient(top,  $top $tpercent,$bottom $bpercent); /* IE10+ */
  background: linear-gradient(to bottom,  $top $tpercent,$bottom $bpercent); /* W3C */
  //filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#ffffff',GradientType=0 ); /* IE6-9 */
}




// -----------------------------------------

  // Left to Right Linear Gradients
  
 // -------------------------------------------

@mixin ltorLinearGradient($leftcolor, $rightcolor, $imgname) {
  $filepath: "/racing/_assets/images/team" + "/" + $imgname;

  background-color: $rightcolor;    /* Fallback (could use .jpg/.png alternatively) */
  background-image: url($filepath + ".svg");   /* SVG fallback for IE 9 (could be data URI, or could use filter) */
  background-image: -webkit-gradient(linear, left top, right top, from($leftcolor), to($rightcolor)); /* Safari 4, Chrome 1-9, iOS 3.2-4.3, Android 2.1-3.0 */
  background-image: -webkit-linear-gradient(left, $leftcolor, $rightcolor);  /* Safari 5.1, iOS 5.0-6.1, Chrome 10-25, Android 4.0-4.3 */
  background-image: -moz-linear-gradient(left, $leftcolor, $rightcolor);  /* Firefox 3.6 - 15 */
  background-image: -o-linear-gradient(left, $leftcolor, $rightcolor);  /* Opera 11.1 - 12 */
  background-image: linear-gradient(to right, $leftcolor, $rightcolor);  /* Opera 15+, Chrome 25+, IE 10+, Firefox 16+, Safari 6.1+, iOS 7+, Android 4.4+ */
  //filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=$leftcolor, endColorstr=$rightcolor);  /* "Invalid", but works in 6-8 */
  //-ms-filter: "progid:DXImageTransform.Microsoft.gradient (GradientType=0, startColorstr=$leftcolor, endColorstr=$rightcolor)";  /* Valid, works in 8-9 */
}

//mixin for fontAwesome....
@mixin arrDown($content, $color, $bLeft, $bRight, $bTop, $top, $left){
  &:before{
     content: $content; 
     //fontAwesome doesn't give the sharp edges on arrow.used borders..
//     font-family: FontAwesome; 
//     font-style: normal;
//     font-weight: normal;
//     text-decoration: inherit;
// --adjust as necessary--
//     color: $color;
//     font-size: $fontSize;
//     padding-right: 0.5em;
    position: absolute;
    top: $top;
    left:$left;
    width: 0px;
    height: 0px;
    border-left: $bLeft solid transparent;
    border-right: $bRight solid transparent;
    border-top: $bTop solid $color;
  } 
}






// mixin for site...

@mixin border-radius($radius:5px){
  -webkit-border-radius: $radius;
      -moz-border-radius: $radius;
      -o-border-radius:$radius;
      border-radius: $radius;

}

@mixin background-size($size:contain){
   -webkit-background-size: $size;
  -moz-background-size:$size;
  -o-background-size:$size;
  background-size:$size;
}

@mixin transition($transition-property:all, $transition-time:100ms, $transition-method:ease(0,0,0,0)){
      -webkit-transition: $transition-property $transition-time $transition-method;
      -moz-transition: $transition-property $transition-time $transition-method;
      -ms-transition: $transition-property $transition-time $transition-method;
      -o-transition: $transition-property $transition-time $transition-method;
      transition: $transition-property $transition-time $transition-method;
}





// -----------------------------------------

  // REM Units with PX fallback

// -------------------------------------------

 // example: @include rem("margin", 10, 5, 10, 5);
 // example: @include rem("font-size", 14);

@mixin rem($property, $values...) {
  $n: length($values);
    $i: 1;

    $pxlist: ();
    $remlist: ();

    @while $i <= $n {
    $itemVal: (nth($values, $i));
    @if $itemVal != "auto"{
      $pxlist: append($pxlist, $itemVal + px);
        //$remlist: append($remlist, ($itemVal / 10) + rem); // Use this if you've set HTML font size value to 62.5%
      $remlist: append($remlist, ($itemVal / 16) + rem);
    }@else{
      $pxlist: append($pxlist, auto);
      $remlist: append($remlist, auto);
    }
    
  
      $i: $i + 1;
    }

    #{$property}: $pxlist;
    #{$property}: $remlist;
}




// -----------------------------------------

  // Opacity

 // -------------------------------------------

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// -----------------------------------------

  // Hover and Focus

 // -------------------------------------------

@mixin hoverFocus($property, $value) {
    &:hover, &:focus {
        #{$property}: $value;
    }
}

// -----------------------------------------

  // Arrows / Triangles

 // -------------------------------------------

 // example: @include arrow("left", #cccccc, 10);

@mixin arrow($direction, $color, $size){
  $pxSize: $size +px;
  $remSize: ($size /10)+rem;
  
  #{width}: 0;
    #{height}: 0;
  
  @if $direction == "left"{
    border-top: $pxSize solid transparent;
    border-right: $pxSize solid $color;
    border-bottom: $pxSize solid transparent;
    
    border-top: $remSize solid transparent;
    border-right: $remSize solid $color;
    border-bottom: $remSize solid transparent;
  }@else if $direction == "right"{
    border-top: $pxSize solid transparent;
    border-bottom: $pxSize solid transparent;
    border-left: $pxSize solid $color;
    
    border-top: $remSize solid transparent;
    border-bottom: $remSize solid transparent;
    border-left: $remSize solid $color;
  }@else if $direction == "up"{
    border-left: $pxSize solid transparent;
    border-right: $pxSize solid transparent;
    border-bottom: $pxSize solid $color;
    
    border-left: $remSize solid transparent;
    border-right: $remSize solid transparent;
    border-bottom: $remSize solid $color;
  }@else if $direction == "down"{
    border-left: $pxSize solid transparent;
    border-right: $pxSize solid transparent;
    border-top: $pxSize solid $color;
    
    border-left: $remSize solid transparent;
    border-right: $remSize solid transparent;
    border-top: $remSize solid $color;
  }
    
}

// -----------------------------------------

  // Text Shadow

// -------------------------------------------

 // example: @include single-text-shadow(1px, 2px, 2px, #000);

@mixin single-text-shadow($hoff: false, $voff: false, $blur: false, $color: false) {
  text-shadow:$hoff $voff $blur $color;
}

// example: @include inner-shadow(1px, 2px, 2px, #000);

@mixin inner-shadow($hoff: false, $voff: false, $blur: false, $color: false) {
  -moz-box-shadow:    inset $hoff $voff $blur $color;
    -webkit-box-shadow: inset $hoff $voff $blur $color;
    box-shadow:         inset $hoff $voff $blur $color;
}


// -----------------------------------------

  // Box-shadow

 // -------------------------------------------

@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
  -webkit-box-shadow: $top $left $blur $color #{$inset};
  -moz-box-shadow: $top $left $blur $color #{$inset};
  box-shadow: $top $left $blur $color #{$inset};
}


// -----------------------------------------

  // Rotate

 // -------------------------------------------

@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
  -moz-transform: rotate($deg + deg);
  -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
  -ms-transform: rotate($deg + deg);
  transform: rotate($deg + deg);
  filter: progid:DXImageTransform.Microsoft.Matrix(M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
  zoom: 1
}

/* TRANSITION */
// @mixin transition($what: all, $length: 1s, $easing: ease-in-out) {
//   -moz-transition:    $what $length $easing;
//   -o-transition:      $what $length $easing;
//   -webkit-transition: $what $length $easing;
//   -ms-transition:     $what $length $easing;
//   transition:         $what $length $easing;
// }


// -----------------------------------------

  // Display inline block cross browser

// -------------------------------------------

// example: @include inline-block();

@mixin inline-block() {
  display: -moz-inline-stack;
  display: inline-block;
  vertical-align: top;
  zoom: 1;
  *display: inline;
}

// -----------------------------------------

  // Replace text

// -------------------------------------------

// example: @include replace-text();

@mixin replace-text() {
  border: 0;
  color: transparent;
  font: 0/0 a;
  text-shadow: none;
}

// -----------------------------------------

  // Change placeholder text color

// -------------------------------------------

// example: @include placeholder-color(#333);

@mixin placeholder-color($color){
  &.placeholder{
    color: $color
  }

  &:-moz-placeholder{
    color: $color
  }
    
  &::-webkit-input-placeholder{
    color: $color
  }

  &:-ms-input-placeholder{
    color: $color
  }
}

// -----------------------------------------

//  Box Model
//  @include box-sizing(border-box);

// -------------------------------------------

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model;
     -moz-box-sizing: $box-model;
          box-sizing: $box-model;
}

// -----------------------------------------

  // Clearfix after element

 // -------------------------------------------

 // example: @include clearfix();

@mixin clearfix() {
    & {
        *zoom: 1;
    }
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

// -----------------------------------------

  // Hide Elements

 // -------------------------------------------

 // example: @include hide-text();

@mixin hide-text() {
  position:relative;
  text-indent:-99999px;
  display: inline-block;
}

@mixin linkTextOffscreen() {
    text-indent: 100%;
    overflow: hidden;
    text-decoration: none;
    display: block;
    font-size: 0;
    text-align: start;
    white-space: nowrap;
}

// -----------------------------------------

  // A bullet-proof Sass @font-face

 // -------------------------------------------

  // example: @include font-face($style-name, $file, $family, $category);

  // $style-name: The style name, used for the @font-face font-family, the extend classname and font-family.
  // $file: The name of your file (all formats of this style need to have the same file name) without its extention.
  // $family: The font family (NOT the CSS font-family e.g. opensans, ptsans, arial, etc) - this is used in the url path.
  // $category: The category of the font, e.g. serif, sans-serif - this is used in the extend class font-family declaration as a fallback.

@mixin font-face($style-name, $file, $family, $category:"") {
    $filepath: "/_assets/fonts/" + $family + "/" + $file;
    @font-face {
        font-family: "#{$style-name}";
        src: url($filepath + ".eot");
        src: url($filepath + ".eot?#iefix") format('embedded-opentype'), url($filepath + ".woff") format('woff'), url($filepath + ".ttf")  format('truetype'), url($filepath + ".svg#" + $style-name + "") format('svg');
    }
    %#{$style-name} {
        font: {
            @if $category != "" {
                family: "#{$style-name}", #{$category};
            }
            @else {
                family: "#{$style-name}";
                weight: normal;
            }
        }
    }
}

// -----------------------------------------

  // Quickly center any element within its parent. 
  // Requires width or max-width to be set.

 // -------------------------------------------

 // example: @include center-block;

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}



// -----------------------------------------

  // Absolute Positioned

 // -------------------------------------------

 // example: @include abs-pos(10px, 10px, 5px, 15px);

@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}


// -----------------------------------------

  // Set width of a centered wrapper container

 // -------------------------------------------

 // example: @include wrapper(965px);

@mixin wrapper ($wrapper-width) {
  margin: 0 auto;
  width: $wrapper-width;
}



// Striped rows in tables
// -------------------------

@mixin striped-bg($location, $bg-color) {
  @if $location == "head" {
    background-color: $bg-color
  }
  @else { 
    tr:nth-child(2n) {
      background-color: $bg-color
    }
  }
}


// -----------------------------------------

  // Set background for social cta's

 // -------------------------------------------

@mixin social-cta($social-name) {
  color: $white;
  display: block;
  text-transform: uppercase; 
  text-decoration: none; 
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: 700;
  letter-spacing: 0.0625em;
  @include rem("padding", 4, 0, 0, 8);
  @include rem("font-size", 13.5);
  @include box-sizing(border-box);
  @if $social-name == "twitter" {
    border: solid 1px #34a1cc;
    @include linearGradient(rgba(54, 210, 253, 1), 0%, rgba(25, 119, 148, 1), 50%);
  }
  @else if $social-name == "facebook" { 
    border: solid 1px #193974;
    @include linearGradient(rgba(66, 105, 167, 1), 0%, rgba(37, 68, 128, 1), 50%);
  }
}